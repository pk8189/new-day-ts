/**
 * File Generated by Sideko (sideko.dev)
 */

import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "new-day-ts/core";
import { CurrentClient } from "new-day-ts/resources/accounts/billing-periods/current";
import { BalancesClient } from "new-day-ts/resources/accounts/billing-periods/balances";
import { SpendTypesClient } from "new-day-ts/resources/accounts/billing-periods/spend-types";
import { TransactionsClient } from "new-day-ts/resources/accounts/billing-periods/transactions";
import * as requests from "new-day-ts/resources/accounts/billing-periods/request-types";
import * as types from "new-day-ts/types";
import qs from "qs";

export class BillingPeriodsClient extends CoreResourceClient {
  current: CurrentClient;
  balances: BalancesClient;
  spendTypes: SpendTypesClient;
  transactions: TransactionsClient;

  constructor(client: CoreClient) {
    super(client);

    this.current = new CurrentClient(this._client);
    this.balances = new BalancesClient(this._client);
    this.spendTypes = new SpendTypesClient(this._client);
    this.transactions = new TransactionsClient(this._client);
  }

  /**
   * Shows billing period details (balances and balance type breakdown).
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<
    | types.GetBillingPeriodDetailsResponse
    | types.GetBillingPeriodDetailsResponse
    | types.GetBillingPeriodDetailsResponse
  > {
    return this._client.makeRequest({
      method: "get",
      path: `/accounts/${request.accountId}/billing-periods/${request.billingPeriodId}`,
      headers: { "context-tenantid": request.contextTenantid },
      responseType: "json",
      opts,
    });
  }

  /**
   * Lists the billing periods for the given account.
   */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<
    | types.GetBillingPeriodsResponse
    | types.GetBillingPeriodsResponse
    | types.GetBillingPeriodsResponse
  > {
    return this._client.makeRequest({
      method: "get",
      path: `/accounts/${request.accountId}/billing-periods`,
      query: [
        qs.stringify({ hasStatement: request.hasStatement }),
        qs.stringify({ linkedAccount: request.linkedAccount }),
      ],
      headers: { "context-tenantid": request.contextTenantid },
      responseType: "json",
      opts,
    });
  }
}

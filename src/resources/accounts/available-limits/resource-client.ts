/**
 * File Generated by Sideko (sideko.dev)
 */

import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "new-day-ts/core";
import * as requests from "new-day-ts/resources/accounts/available-limits/request-types";
import * as types from "new-day-ts/types";

export class AvailableLimitsClient extends CoreResourceClient {
  constructor(client: CoreClient) {
    super(client);
  }

  /**
 * import Client from "new-day-ts";

const client = new Client();

const res = await client.accounts.availableLimits.list({
  accountId: "string",
  contextTenantid: "string",
});
 */
  list(
    request: requests.ListRequest,
    opts?: RequestOptions,
  ): ApiPromise<
    | types.GetAccountAvailableLimitsResponse
    | types.GetAccountAvailableLimitsResponse
    | types.GetAccountAvailableLimitsResponse
  > {
    return this._client.makeRequest({
      method: "get",
      path: `/accounts/${request.accountId}/available-limits`,
      headers: { "context-tenantid": request.contextTenantid },
      responseType: "json",
      opts,
    });
  }
}
